{"ast":null,"code":"import{ComposableMap,Geographies,Geography}from\"react-simple-maps\";import{jsx as _jsx}from\"react/jsx-runtime\";import{Fragment as _Fragment}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var geoUrl=\"/map.json\";export default function Map(_ref){var highlightedCountries=_ref.highlightedCountries;return/*#__PURE__*/_jsx(\"div\",{children:/*#__PURE__*/_jsxs(ComposableMap,{width:1600,children:[/*#__PURE__*/_jsx(Geographies,{geography:geoUrl,children:function children(_ref2){var geographies=_ref2.geographies;return geographies.map(function(geo){if(highlightedCountries.includes(geo.id)){return/*#__PURE__*/_jsx(Geography,{geography:geo,tabIndex:-1,style:{default:{fill:\"#0072b1\",outline:\"none\"},hover:{outline:\"none\"},pressed:{outline:\"none\"}}},geo.rsmKey);};return/*#__PURE__*/_jsx(_Fragment,{});});}}),/*#__PURE__*/_jsx(Geographies,{geography:geoUrl,children:function children(_ref3){var geographies=_ref3.geographies;return geographies.map(function(geo){if(!highlightedCountries.includes(geo.id)){return/*#__PURE__*/_jsx(Geography,{geography:geo,tabIndex:-1,style:{default:{fill:\"#D6D6DA\",outline:\"none\"},hover:{outline:\"none\"},pressed:{outline:\"none\"}}},geo.rsmKey);}return/*#__PURE__*/_jsx(_Fragment,{});});}})]})});};","map":{"version":3,"names":["ComposableMap","Geographies","Geography","geoUrl","Map","highlightedCountries","geographies","map","geo","includes","id","default","fill","outline","hover","pressed","rsmKey"],"sources":["C:/Projects/antonvdi.github.io/src/components/Map.js"],"sourcesContent":["import { ComposableMap, Geographies, Geography } from \"react-simple-maps\";\r\n\r\nconst geoUrl = \"/map.json\";\r\n\r\nexport default function Map({highlightedCountries}) {\r\n\r\n    return ( \r\n    <div>\r\n        <ComposableMap width={1600}>\r\n          <Geographies geography={geoUrl}>\r\n            {({ geographies }) =>\r\n                geographies.map((geo) => {\r\n                    if(highlightedCountries.includes(geo.id)) {\r\n                        return (<Geography \r\n                            key={geo.rsmKey} \r\n                            geography={geo}\r\n                            tabIndex={-1}\r\n                            style = {{\r\n                                default: {\r\n                                    fill: \"#0072b1\",\r\n                                    outline: \"none\",\r\n                                },\r\n                                hover: {\r\n                                    outline: \"none\",\r\n                                },\r\n                                pressed: {\r\n                                    outline: \"none\",\r\n                                }\r\n                            }}\r\n                            />);\r\n                    };\r\n                    return (<></>);\r\n                })\r\n            }\r\n          </Geographies>\r\n          <Geographies geography={geoUrl}>\r\n          {({ geographies }) =>\r\n                geographies.map((geo) => {\r\n                    if(!highlightedCountries.includes(geo.id)) {\r\n                        return (<Geography \r\n                            key={geo.rsmKey} \r\n                            geography={geo}\r\n                            tabIndex={-1}\r\n                            style = {{\r\n                                default: {\r\n                                    fill: \"#D6D6DA\",\r\n                                    outline: \"none\",\r\n                                },\r\n                                hover: {\r\n                                    outline: \"none\",\r\n                                },\r\n                                pressed: {\r\n                                    outline: \"none\",\r\n                                }\r\n                            }}\r\n                            />);\r\n                    }\r\n                    return (<></>);\r\n                })\r\n            }\r\n          </Geographies>\r\n        </ComposableMap>\r\n      </div>);\r\n};\r\n\r\n"],"mappings":"AAAA,OAASA,aAAT,CAAwBC,WAAxB,CAAqCC,SAArC,KAAsD,mBAAtD,C,6IAEA,GAAMC,OAAM,CAAG,WAAf,CAEA,cAAe,SAASC,IAAT,MAAqC,IAAvBC,qBAAuB,MAAvBA,oBAAuB,CAEhD,mBACA,kCACI,MAAC,aAAD,EAAe,KAAK,CAAE,IAAtB,wBACE,KAAC,WAAD,EAAa,SAAS,CAAEF,MAAxB,UACG,4BAAGG,YAAH,OAAGA,WAAH,OACGA,YAAW,CAACC,GAAZ,CAAgB,SAACC,GAAD,CAAS,CACrB,GAAGH,oBAAoB,CAACI,QAArB,CAA8BD,GAAG,CAACE,EAAlC,CAAH,CAA0C,CACtC,mBAAQ,KAAC,SAAD,EAEJ,SAAS,CAAEF,GAFP,CAGJ,QAAQ,CAAE,CAAC,CAHP,CAIJ,KAAK,CAAI,CACLG,OAAO,CAAE,CACLC,IAAI,CAAE,SADD,CAELC,OAAO,CAAE,MAFJ,CADJ,CAKLC,KAAK,CAAE,CACHD,OAAO,CAAE,MADN,CALF,CAQLE,OAAO,CAAE,CACLF,OAAO,CAAE,MADJ,CARJ,CAJL,EACCL,GAAG,CAACQ,MADL,CAAR,CAiBH,EACD,mBAAQ,kBAAR,CACH,CArBD,CADH,EADH,EADF,cA2BE,KAAC,WAAD,EAAa,SAAS,CAAEb,MAAxB,UACC,4BAAGG,YAAH,OAAGA,WAAH,OACKA,YAAW,CAACC,GAAZ,CAAgB,SAACC,GAAD,CAAS,CACrB,GAAG,CAACH,oBAAoB,CAACI,QAArB,CAA8BD,GAAG,CAACE,EAAlC,CAAJ,CAA2C,CACvC,mBAAQ,KAAC,SAAD,EAEJ,SAAS,CAAEF,GAFP,CAGJ,QAAQ,CAAE,CAAC,CAHP,CAIJ,KAAK,CAAI,CACLG,OAAO,CAAE,CACLC,IAAI,CAAE,SADD,CAELC,OAAO,CAAE,MAFJ,CADJ,CAKLC,KAAK,CAAE,CACHD,OAAO,CAAE,MADN,CALF,CAQLE,OAAO,CAAE,CACLF,OAAO,CAAE,MADJ,CARJ,CAJL,EACCL,GAAG,CAACQ,MADL,CAAR,CAiBH,CACD,mBAAQ,kBAAR,CACH,CArBD,CADL,EADD,EA3BF,GADJ,EADA,CAyDH"},"metadata":{},"sourceType":"module"}